
<!DOCTYPE html>
<html>
<head>
    <title>Mock Service</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
        }

        .container {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .section {
            border: 1px solid #ddd;
            padding: 15px;
            border-radius: 5px;
        }

        .form-group {
            margin-bottom: 10px;
        }

        label {
            display: inline-block;
            width: 100px;
        }

        input, select, textarea {
            padding: 5px;
            width: 300px;
        }

        button {
            padding: 8px 15px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }

            button:hover {
                background-color: #45a049;
            }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        .header-row {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
        }

            .header-row input {
                width: 150px;
            }

            .header-row button {
                background-color: #f44336;
            }
        /* Стили модального окна */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: #fefefe;
            margin: 10% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 60%;
            max-width: 600px;
            border-radius: 5px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

            .close:hover {
                color: black;
            }
    </style>
    <script src="~/Scripts/modal.js"></script>
</head>
<body>

    <div class="container">
        <div class="section">
            <h2>Форма добавления/редактирования заглушки</h2>
            <div class="form-group">
                <label for="method">Метод:</label>
                <select id="method">
                    <option value="GET">GET</option>
                    <option value="POST">POST</option>
                    <option value="PUT">PUT</option>
                    <option value="DELETE">DELETE</option>
                    <option value="PATCH">PATCH</option>
                </select>
            </div>
            <div class="form-group">
                <label for="path">Путь:</label>
                <input type="text" id="path" placeholder="/api/resource">
            </div>
            <div class="form-group">
                <label for="statusCode">Код статуса:</label>
                <input type="number" id="statusCode" value="200">
            </div>
            <div class="form-group">
                <label for="responseBody">Тело ответа:</label>
                <textarea id="responseBody" rows="5" placeholder='{ "key": "value" }'></textarea>
            </div>
            <div id="headersContainer">
                <h3>Заголовки</h3>
                <div id="headers">
                    <!-- Заголовки будут добавляться здесь -->
                </div>
                <button type="button" onclick="addHeader()">+</button>
            </div>
            </br>
            <div id="formContainer">

                <button onclick="configureMock()">Сохранить заглушку</button>
            </div>


        </div>

        <div class="section">
            <h2>Все заглушки</h2>
            <button onclick="refreshMocks()">Обновить</button>
            <!-- <button onclick="clearAllMocks()" style="background-color: #f44336;">Очистить все</button> -->
            </br>
            <table id="mocksTable">
                <thead>
                    <tr>
                        <th>Метод</th>
                        <th>Путь</th>
                        <th>Статус</th>
                        <th>Ответ</th>
                        <th>Заголовки</th>
                        <th>Удалить</th>
                        <th>Редактировать</th>
                    </tr>
                </thead>
                <tbody></tbody>
            </table>
        </div>
    </div>

    <!-- Модальное окно редактирования -->
    <div id="mockModal" class="modal">
        <div class="modal-content">
            <span class="close">&times;</span>
            <h2>Редактировать мок</h2>
            <div class="form-container">
                <!-- Форма будет заполняться динамически -->
                <div class="form-group">
                    <label for="editMethod">Метод:</label>
                    <select id="editMethod">
                        <option value="GET">GET</option>
                        <option value="POST">POST</option>
                        <option value="PUT">PUT</option>
                        <option value="DELETE">DELETE</option>
                        <option value="PATCH">PATCH</option>
                    </select>
                </div>
                <!-- Остальные поля формы -->

                <div class="form-group">
                    <label for="editPath">Путь:</label>
                    <input type="text" id="editPath" placeholder="/api/resource">
                </div>
                <div class="form-group">
                    <label for="editStatusCode">Код статуса:</label>
                    <input type="number" id="editStatusCode" value="200">
                </div>
                <div class="form-group">
                    <label for="editResponseBody">Тело ответа:</label>
                    <textarea id="editResponseBody" rows="5" placeholder='{ "key": "value" }'></textarea>
                </div>
                <div id="headersContainer">
                    <h3>Заголовки</h3>
                    <div id="editHeaders">
                        <!-- Заголовки будут добавляться здесь -->
                    </div>
                    <button type="button" onclick="addHeader()">+</button>
                </div>
                </br>
                <div id="formContainer">

                    <button onclick="configureMock()">Сохранить заглушку</button>
                </div>

                <button onclick="saveMock()">Сохранить</button>
            </div>
        </div>
    </div>

    <script>
        // Добавление полей для заголовка
        function addHeader() {
            const headersDiv = document.getElementById('headers');
            const headerDiv = document.createElement('div');
            headerDiv.className = 'header-row';

            const keyInput = document.createElement('input');
            keyInput.type = 'text';
            keyInput.placeholder = 'Имя заголовка';

            const valueInput = document.createElement('input');
            valueInput.type = 'text';
            valueInput.placeholder = 'Значение заголовка';

            const removeBtn = document.createElement('button');
            removeBtn.textContent = 'X';
            removeBtn.onclick = function () {
                headersDiv.removeChild(headerDiv);
            };

            headerDiv.appendChild(keyInput);
            headerDiv.appendChild(valueInput);
            headerDiv.appendChild(removeBtn);
            headersDiv.appendChild(headerDiv);
        }

        // Настройка нового мока
        function configureMock() {
            const method = document.getElementById('method').value;
            const path = document.getElementById('path').value;
            const statusCode = parseInt(document.getElementById('statusCode').value);
            let responseBody = document.getElementById('responseBody').value;

            // Пробуем распарсить как JSON, если не получается - оставляем строкой
            try {
                responseBody = JSON.parse(responseBody);
            } catch (e) {
                // Оставляем как строку
            }

            // Собираем заголовки
            const headers = {};
            const headerRows = document.getElementById('headers').children;
            for (let row of headerRows) {
                const key = row.children[0].value;
                const value = row.children[1].value;
                if (key && value) {
                    headers[key] = value;
                }
            }

            const mockRequest = {
                Path: path,
                Method: method,
                Response: {
                    StatusCode: statusCode,
                    Body: responseBody,
                    Headers: headers
                }
            };

            fetch('/api/mock/configure', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(mockRequest)
            })
                .then(response => {
                    // В функции configureMock()
                    if (path === "/" || path === "") {
                        alert("Нельзя настроить мок для корневого пути. Используйте конкретные пути, например '/api/users'");
                        return;
                    }
                    if (response.ok) {
                        alert('Мок успешно настроен!');
                        refreshMocks();
                    } else {
                        alert('Ошибка при настройке мока');
                    }
                })
                .catch(error => {
                    console.error('Ошибка:', error);
                    alert('Ошибка при настройке мока');
                });
        }

        // Обновление таблицы моков
        function refreshMocks() {
            fetch('/api/mock/configurations')
                .then(response => response.json())
                .then(data => {
                    const tbody = document.querySelector('#mocksTable tbody');
                    tbody.innerHTML = '';

                    data.forEach(item => {
                        const row = document.createElement('tr');

                        const methodCell = document.createElement('td');
                        methodCell.textContent = item.Method;

                        const pathCell = document.createElement('td');
                        pathCell.textContent = item.Path;

                        const statusCell = document.createElement('td');
                        statusCell.textContent = item.Response.StatusCode;

                        const responseCell = document.createElement('td');
                        responseCell.textContent = typeof item.Response.Body === 'object'
                            ? JSON.stringify(item.Response.Body)
                            : item.Response.Body;

                        const headersCell = document.createElement('td');
                        headersCell.textContent = item.Response.Headers
                            ? Object.entries(item.Response.Headers).map(([k, v]) => `${k}: ${v}`).join(', ')
                            : '';

                        row.appendChild(methodCell);
                        row.appendChild(pathCell);
                        row.appendChild(statusCell);
                        row.appendChild(responseCell);
                        row.appendChild(headersCell);
                        tbody.appendChild(row);
                        const deleteCell = document.createElement('td');
                        const deleteBtn = document.createElement('button');
                        deleteBtn.textContent = 'X';
                        deleteBtn.style.backgroundColor = '#f44336';
                        deleteBtn.onclick = () => deleteMock(item.Id);
                        deleteCell.appendChild(deleteBtn);
                        row.appendChild(deleteCell);

                        const editCell = document.createElement('td');
                        const editBtn = document.createElement('button');
                        editBtn.textContent = '✏️';
                        editBtn.style.backgroundColor = '#444337';
                        editBtn.onclick = () => openEditModal(item.Id);
                        editCell.appendChild(editBtn);
                        row.appendChild(editCell);
                    });
                })
                .catch(error => {
                    console.error('Ошибка:', error);
                });

        }

        // Очистка всех моков
        function clearAllMocks() {
            if (confirm('Вы уверены, что хотите очистить все моки?')) {
                fetch('/api/mock/clear', {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Все моки очищены!');
                            refreshMocks();
                        } else {
                            alert('Ошибка при очистке моков');
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка:', error);
                        alert('Ошибка при очистке моков');
                    });
            }
        }

        // Удаление мока

        function deleteMock(id) {
            if (confirm('Вы уверены, что хотите удалить этот мок?')) {
                fetch(`/api/mock/delete/${id}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (response.ok) {
                            alert('Мок удалён!');
                            refreshMocks();
                        } else {
                            alert('Ошибка при удалении мока');
                        }
                    })
                    .catch(error => {
                        console.error('Ошибка:', error);
                        alert('Ошибка при удалении мока');
                    });
            }
        }

        // Новая функция для редактирования мока
        function editMock(mockId) {
            fetch(`/api/mock/configurations/${mockId}`)
                .then(response => response.json())
                .then(mock => {
                    // Заполняем форму данными мока
                    document.getElementById('method').value = mock.Method;
                    document.getElementById('path').value = mock.Path;
                    document.getElementById('statusCode').value = mock.Response.StatusCode;

                    // Парсим тело ответа
                    let responseBody = mock.Response.Body;
                    if (typeof responseBody === 'string') {
                        try {
                            responseBody = JSON.parse(responseBody);
                            responseBody = JSON.stringify(responseBody, null, 2);
                        } catch (e) {
                            // Оставляем как есть
                        }
                    } else {
                        responseBody = JSON.stringify(responseBody, null, 2);
                    }
                    document.getElementById('responseBody').value = responseBody;

                    // Заполняем заголовки
                    const headersDiv = document.getElementById('headers');
                    headersDiv.innerHTML = '';
                    if (mock.Response.Headers) {
                        Object.entries(mock.Response.Headers).forEach(([key, value]) => {
                            addHeaderWithValues(key, value);
                        });
                    }

                    // Добавляем кнопку "Обновить" вместо "Создать"
                    const submitButton = document.createElement('button');
                    submitButton.textContent = 'Обновить мок';
                    submitButton.onclick = () => updateMock(mockId);
                    document.getElementById('formContainer').appendChild(submitButton);
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ошибка при загрузке мока');
                });
        }

        // Функция для добавления заголовков с значениями
        function addHeaderWithValues(key, value) {
            const headersDiv = document.getElementById('headers');
            const headerDiv = document.createElement('div');
            headerDiv.className = 'header-row';

            const keyInput = document.createElement('input');
            keyInput.type = 'text';
            keyInput.placeholder = 'Имя заголовка';
            keyInput.value = key;

            const valueInput = document.createElement('input');
            valueInput.type = 'text';
            valueInput.placeholder = 'Значение заголовка';
            valueInput.value = value;

            const removeBtn = document.createElement('button');
            removeBtn.textContent = 'Удалить';
            removeBtn.onclick = function () {
                headersDiv.removeChild(headerDiv);
            };

            headerDiv.appendChild(keyInput);
            headerDiv.appendChild(valueInput);
            headerDiv.appendChild(removeBtn);
            headersDiv.appendChild(headerDiv);
        }

        // Функция для обновления мока
        function updateMock(mockId) {
            const method = document.getElementById('method').value;
            const path = document.getElementById('path').value;
            const statusCode = parseInt(document.getElementById('statusCode').value);
            let responseBody = document.getElementById('responseBody').value;

            try {
                responseBody = JSON.parse(responseBody);
            } catch (e) {
                // Оставляем как строку
            }

            // Собираем заголовки
            const headers = {};
            const headerRows = document.getElementById('headers').children;
            for (let row of headerRows) {
                const key = row.children[0].value;
                const value = row.children[1].value;
                if (key && value) {
                    headers[key] = value;
                }
            }

            fetch(`/api/mock/update/${mockId}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    Path: path,
                    Method: method,
                    Response: {
                        StatusCode: statusCode,
                        Body: responseBody,
                        Headers: headers
                    }
                })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Мок успешно обновлен!');
                        refreshMocks();
                    } else {
                        alert('Ошибка при обновлении мока');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Ошибка при обновлении мока');
                });

        }

        // Инициализация
        document.addEventListener('DOMContentLoaded', function () {
            refreshMocks();
            addHeader(); // Добавляем один заголовок по умолчанию
        });
    </script>
</body>
    </html>
